# Prompt and man pages override
#source /cygdrive/d/tools/git/etc/git-prompt.sh
#export PS1="\[$ORANGE\]\h\[$WHITE\]:\[$GREEN\]\w \[$PURPLE\]\$(__git_ps1 \"(%s)\")\[$WHITE\]\n\$ \[$RESET\]"
export PS1="\[$WHITE\]┌\[$ORANGE\]\h\[$WHITE\]:\[$PURPLE\](\j_$?)\[$WHITE\]:\[$GREEN\]\w \[$WHITE\]\n└> \[$RESET\]"
unset LESS_TERMCAP_md

# Misc additions
export DEVSRC='d:/pv2/'
export MARKIT_PROPERTIES=''

# Java additions
export JAVA6_64=/cygdrive/c/Program\ Files/Java/jdk1.6.0_25
export JAVA6_32=/cygdrive/c/Program\ Files\ \(x86\)/Java/jdk1.6.0_32
export JAVA_HOME=${JAVA6_64}

# Maven additions
export MAVEN_OPTS='-Xmx1g -XX:MaxPermSize=256m'
export M2_HOME=/cygdrive/c/ExternalSoftware/apache-maven-3.1.1
export M2=${M2_HOME}/bin

# Ant additions
#export ANT_OPTS='-Xms128m -Xmx1g -XX:MaxPermSize=256m'

# Git additions
#export GIT_HOME=/cygdrive/d/tools/git
export GIT_PS1_SHOWDIRTYSTATE='true'

# Git credentials
GIT_AUTHOR_NAME="Jens Hoffmann"
GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
git config --global user.name "$GIT_AUTHOR_NAME"
GIT_AUTHOR_EMAIL="jens.hoffmann@markit.com"
GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
git config --global user.email "$GIT_AUTHOR_EMAIL"

# Misc git config
git config --global core.editor "vim"
git config --global commit.template "~/.gitmessage.txt"
git config --global diff.tool "kdiff3"
git config --global difftool.prompt "false"
git config --global difftool.kdiff3.cmd "kdiff3 \$(cygpath -w \"\$LOCAL\") \"\$REMOTE\""
git config --global difftool.kdiff3.trustExitCode "false"
git config --global merge.tool "kdiff3"
git config --global mergetool.kdiff3.cmd "kdiff3 \"\$LOCAL\" \"\$REMOTE\" -o \"\$MERGED\""
git config --global mergetool.kdiff3.trustExitCode "false"

# PATH additions
export PATH="~/bin:$PATH"
export PATH=/cygdrive/c/ExternalSoftware/KDiff3/:${PATH}
#export PATH=${GIT_HOME}/bin:${PATH}
export PATH=${JAVA_HOME}/bin:${PATH}
export PATH=${M2}:${PATH}

# Directory aliases
alias dev='cd $DEVSRC'
alias log='cd c:/var/log'
alias wg='dev;cd warehouse'
alias vg='dev;cd valuations'
alias mg='dev;cd marketdata'
alias qg='dev;cd qag'
alias cg='dev;cd core-api'

# Maven aliases
#alias mvn='mvn -Dmarkit.properties=$DEVSRC/warehouse/src/java/markit.properties'
#alias mi='mvn clean install -DskipTests -Dmaven.javadoc.skip'
#alias mit='mvn clean install -Dmaven.javadoc.skip'

# File system and misc functions
x() { ${1:+pushd `trim $1`}; explorer .; ${1:+popd}; }
#gvc() { /cygdrive/c/Program\ Files\ \(x86\)/Mozilla\ Firefox/firefox.exe `git svn info | grep 'URL: '|sed -e 's/URL: //g'|sed -e 's/svn\/svn/svn\/wsvn/'`
gvc() { chrome `git svn info | grep 'URL: '|sed -e 's/URL: //g'|sed -e 's/svn\/svn/svn\/wsvn/'`/$1;}
,() { echo $@ | awk '{gsub(/[ ]+/,",");print}'; }
lstest() { find ${1:-'SPECIFY_DIR'} -type d -name test -exec find {} -type f -name *Test.java \; | sed s#.java##g | awk -F / '{ print $NF }'; }
trim() { echo $1; }
n() { 
    local files
    for f in $@; do 
        if [ -f $f ]; then 
            files="$files $f"
        fi
    done
    if [ -n "$files" ]; then 
        /cygdrive/c/ExternalSoftware/Notepad++/notepad++.exe $files &
    fi
}

# Git functions
gitbr() { 
    for f in $@; do 
        pushd $f > /dev/null
        echo === BRANCHES $f @ `git rev-parse --abbrev-ref HEAD` ===
        git branch -a
        popd > /dev/null
    done 
}
gitup() { 
    for f in $@; do 
        pushd $f > /dev/null
        echo === UPDATING $f @ `git rev-parse --abbrev-ref HEAD` ===
        if git pull --rebase; then :; else return $?; fi
        popd > /dev/null
    done 
}
pgitup() { ls -df $@ | parallel -j 4 "cd {} && git pull --rebase"; }
gitco() { 
    for f in ${*:2}; do 
        pushd $f > /dev/null
        echo === SWITCHING $f @ `git rev-parse --abbrev-ref HEAD` -\> $1 ===
        git checkout $1
        popd > /dev/null
    done 
}
pgitco() { ls -df ${*:2} | parallel -j 4 "cd {} && git checkout $1"; }

# Maven funtions
mb() { for f in $@; do pushd $f > /dev/null; echo === BUILDING: $f @ `git rev-parse --abbrev-ref HEAD` ===; if mvn clean install; then :; else return $?; fi; popd > /dev/null; done }
b() { 
	for (( i=0; i<${#1}; i++ )); do 
		case "${1:$i:1}" in
			"c")
				pushd core-api > /dev/null; if mvn clean install; then :; else return $?; fi; popd > /dev/null;;
			"q")
				pushd qag > /dev/null; if mvn clean install; then :; else return $?; fi; popd > /dev/null;;
			"v")
				pushd valuations > /dev/null; if mvn clean install; then :; else return $?; fi; popd > /dev/null;;
			"m")
				pushd marketdata > /dev/null; if mvn clean install; then :; else return $?; fi; popd > /dev/null;;
			"s")
				pushd warehouse > /dev/null; if mvn -pl code/db -am -P plsql clean package; then :; else return $?; fi; popd > /dev/null;;
			"w")
				pushd warehouse/code > /dev/null; if mvn clean install; then :; else return $?; fi; popd > /dev/null;;
			*)
				return 1
		esac		
	done
}
ad() {
	mvn -P ${3:-local} ${1:+"-Daddin.name=$1"} ${2:+"-Daddin.grade=$2"} -pl app/valuations-addin deploy 
}

# Upload functions
web() {
    local server; local action;
    case "$1" in
        "local")
            server="localhost:10020";;
        "q1")
            server="ukpvqawww001";;
        "q2")
            server="ukpvqawww002";;
        "p1")
            server="ukpvprodwww001";;
        "p2")
            server="ukpvprodwww002";;
        "p")
            server="pv.markit.partners";;
        *)
            return 1
    esac
    case "$3" in
        "upload")
            action="theFile=@$4";;
        "check")
            action="key=$4";;
        "download")
            action="asof=$4";;
        *)
            return 1
    esac
    curl -k http://${server}/upload -F username=$2 -F password=wx02gpf -F ${action};
}

# Cache functions
mdc1() { local arr; arr=$(echo $@ | tr "," "\n"); for x in $arr; do curl -i "http://ukpvqamds001:8080/valuations-mdservice/mdc/cache?action=REMOVE_KEY&cacheType=objectCache&key=$x"; done; }
mdc2() { local arr; arr=$(echo $@ | tr "," "\n"); for x in $arr; do curl -i "http://ukpvqamds002:8080/valuations-mdservice/mdc/cache?action=REMOVE_KEY&cacheType=objectCache&key=$x"; done; }
mdc1prod() { local arr; arr=$(echo $@ | tr "," "\n"); for x in $arr; do curl -i "http://ukpvprodmds001:8080/valuations-mdservice/mdc/cache?action=REMOVE_KEY&cacheType=objectCache&key=$x"; done; }
mdc2prod() { local arr; arr=$(echo $@ | tr "," "\n"); for x in $arr; do curl -i "http://ukpvprodmds002:8080/valuations-mdservice/mdc/cache?action=REMOVE_KEY&cacheType=objectCache&key=$x"; done; }

